// TODO
// - Add support for free and paid plans

//############################################################

// GENERATORS
// run: prisma generate
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

// Open the generated dbml in https://dbdiagram.io/
generator dbml {
  provider = "prisma-dbml-generator"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

//############################################################

// SOURCES

datasource db {
  provider             = "mysql"
  // url      = "file:./db.sqlite"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

//############################################################

// ENUM

enum submission_status {
  created
  verifying
  active
  deactivated
}

enum symbol_type {
  variable
  constant
}

//############################################################

// MODELS
// to view schema, use https://prismaliser.app/

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @unique @default(cuid())
  name                  String
  email                 String    @unique
  emailVerified         DateTime?
  password_hash         String?
  image                 String
  role_id               String?
  verified_symbol_id    String?
  verified_equations_id String?

  submitted_equations Equation[]                @relation("submission: equation")
  submitted_symbols   Symbol[]                  @relation("submission: symbol")
  equations_updated   Equation[]                @relation("update: equation")
  symbols_updated     Symbol[]                  @relation("update: symbol")
  accounts            Account[]
  sessions            Session[]
  topics_updated      Topic[]                   @relation("update: topic")
  staff_of_topic      StaffOnTopic[]            @relation("StaffOnTopic: user")
  verified_equations  StaffOnVerifiedEquation[] @relation("StaffOnVerifiedEquation: user")
  verified_symbols    StaffOnVerifiedSymbol[]   @relation("StaffOnVerifiedSymbol: user")

  role Role? @relation("role: member", fields: [role_id], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id      String @id @default(cuid())
  name    String
  members User[] @relation("role: member")
}

model Equation {
  id              String  @id @default(cuid())
  latex           String
  submitter_id    String
  updater_id      String
  verification_id String? @unique

  status submission_status

  topics  TopicToEquation[]  @relation("EquationToTopic: equation")
  symbols SymbolInEquation[] @relation("SymbolInEquation: equation")

  submitted_by User              @relation("submission: equation", fields: [submitter_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  updated_by   User              @relation("update: equation", fields: [updater_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  verification VerifiedEquation? @relation("verified eqn: equation", fields: [verification_id], references: [id], onDelete: Cascade)
}

model Symbol {
  id              String  @id @default(cuid())
  submitter_id    String
  updater_id      String
  latex           String
  verification_id String?

  status      submission_status
  symbol_type symbol_type

  used_in SymbolInEquation[] @relation("SymbolInEquation: symbol")
  topics  SymbolInTopic[]    @relation("SymbolInTopic: symbol")

  submitted_by User            @relation("submission: symbol", fields: [submitter_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updated_by   User            @relation("update: symbol", fields: [updater_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  verification VerifiedSymbol? @relation("VerifiedSymbol: symbol")
}

model Topic {
  id         String            @id @default(cuid())
  name       String
  updater_id String
  updated_by User              @relation("update: topic", fields: [updater_id], references: [id])
  parents_id String?
  parents    Topic[]           @relation("topic: parent")
  topic      Topic?            @relation("topic: parent", fields: [parents_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  equations  TopicToEquation[] @relation("EquationToTopic: topic")
  symbol     SymbolInTopic[]   @relation("SymbolInTopic: topic")
  staff      StaffOnTopic[]    @relation("StaffOnTopic: topic")

}

model VerifiedEquation {
  id          String                    @id @default(cuid())
  verifiers   StaffOnVerifiedEquation[] @relation("StaffOnVerifiedEquation: equation")
  equation_id Equation?                 @relation("verified eqn: equation")
}

model VerifiedSymbol {
  id          String                  @id @default(cuid())
  verified_by StaffOnVerifiedSymbol[] @relation("StaffOnVerifiedSymbol: symbol")
  symbol_id   String                  @unique
  symbol      Symbol                  @relation("VerifiedSymbol: symbol", fields: [symbol_id], references: [id])
}

//############################################################

// many to many refactor tables
// primary keys are composite

model TopicToEquation {
  topic_id    String
  equation_id String
  topic       Topic    @relation("EquationToTopic: topic", fields: [topic_id], references: [id])
  equation    Equation @relation("EquationToTopic: equation", fields: [equation_id], references: [id])

  @@id([equation_id, topic_id])
}

model SymbolInTopic {
  topic_id  String
  symbol_id String
  topic     Topic  @relation("SymbolInTopic: topic", fields: [topic_id], references: [id])
  symbol    Symbol @relation("SymbolInTopic: symbol", fields: [symbol_id], references: [id])

  @@id([symbol_id, topic_id])
}

model SymbolInEquation {
  symbol_id   String
  equation_id String
  symbol      Symbol   @relation("SymbolInEquation: symbol", fields: [symbol_id], references: [id])
  equation    Equation @relation("SymbolInEquation: equation", fields: [equation_id], references: [id])

  @@id([equation_id, symbol_id])
}

model StaffOnTopic {
  staff_id String
  topic_id String
  staff    User   @relation("StaffOnTopic: user", fields: [staff_id], references: [id])
  topic    Topic  @relation("StaffOnTopic: topic", fields: [topic_id], references: [id])

  @@id([staff_id, topic_id])
}

model StaffOnVerifiedEquation {
  staff_id             String
  verified_equation_id String
  staff                User             @relation("StaffOnVerifiedEquation: user", fields: [staff_id], references: [id])
  verified_equation    VerifiedEquation @relation("StaffOnVerifiedEquation: equation", fields: [verified_equation_id], references: [id])

  @@id([staff_id, verified_equation_id])
}

model StaffOnVerifiedSymbol {
  staff_id           String
  verified_symbol_id String
  staff              User           @relation("StaffOnVerifiedSymbol: user", fields: [staff_id], references: [id])
  verified_symbol    VerifiedSymbol @relation("StaffOnVerifiedSymbol: symbol", fields: [verified_symbol_id], references: [id])

  @@id([staff_id, verified_symbol_id])
}
